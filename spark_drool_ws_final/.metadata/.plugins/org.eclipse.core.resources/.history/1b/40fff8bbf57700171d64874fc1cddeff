package sample.engine;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.drools.KnowledgeBase;
import org.drools.KnowledgeBaseFactory;
import org.drools.builder.KnowledgeBuilder;
import org.drools.builder.KnowledgeBuilderError;
import org.drools.builder.KnowledgeBuilderErrors;
import org.drools.builder.KnowledgeBuilderFactory;
import org.drools.builder.ResourceType;
import org.drools.io.ResourceFactory;
import org.drools.logger.KnowledgeRuntimeLogger;
import org.drools.logger.KnowledgeRuntimeLoggerFactory;
import org.drools.runtime.StatefulKnowledgeSession;

import scala.Array;

public class DroolTest 
{
	public List<HashMap> droolProcess(Dataset<Row> row1, Dataset<Row> row2, int tpos, int presPos, int gasPos) 
	{
		List<HashMap> list = new ArrayList<HashMap>();
		
		try
		{
            KnowledgeBase kbase = readKnowledgeBase();
            StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();
            KnowledgeRuntimeLogger logger = KnowledgeRuntimeLoggerFactory.newFileLogger(ksession, "test2");
            
            rulesExecution(list, ksession, row1, row2, tpos, presPos, gasPos);
            
            logger.close();
        }
		catch (Throwable t) 
		{
            t.printStackTrace();
        }
        return list;
    }

	private void rulesExecution(List<HashMap> list, StatefulKnowledgeSession ksession, Dataset<Row> row1, Dataset<Row> row2, int tpos, int presPos, int gasPos) 
	{
		int t1 = (int) row1.first().getLong(tpos-1);
		int t2 = (int) row2.first().getLong(tpos-1);
		
		int p1 = (int) row1.first().getLong(presPos-1);
		int p2 = (int) row2.first().getLong(presPos-1);
		
		double g1 = row1.first().getDouble(gasPos-1);
		double g2 = row2.first().getDouble(gasPos-1);
		
		Rules message = new Rules();
		message.setTemperature1(t1);
		message.setTemperature2(t2);
		message.setPressure1(p1);
		message.setPressure2(p2);
		message.setGas1(g1);
		message.setGas2(g2);
		
		ksession.insert(message);
		ksession.fireAllRules();
		
		HashMap<String, Integer> updatedRecord1 = new HashMap<String, Integer>();
		HashMap<String, Double> updatedRecord2 = new HashMap<String, Double>();
		
		updatedRecord1.put("TEMP1", t1!=message.temperature1 ? message.temperature1 : t1);
		updatedRecord1.put("TEMP2", t2!=message.temperature2 ? message.temperature2 : t2);
		updatedRecord1.put("PRE1", p1!=message.pressure1 ? message.pressure1 : p1);
		updatedRecord1.put("PRE2", p2!=message.pressure2 ? message.pressure2 : p2);
		updatedRecord2.put("GAS1", g1!=message.gas1 ? message.gas1 : g1);
		updatedRecord2.put("GAS2", g2!=message.gas2 ? message.gas2 : g2);

		list.add(updatedRecord1);
		list.add(updatedRecord2);
	}

	private static KnowledgeBase readKnowledgeBase() throws Exception {
		KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();//.newKnowledgeBuilder();
		kbuilder.add(ResourceFactory.newClassPathResource("MyRule.drl"),
				ResourceType.DRL);
		KnowledgeBuilderErrors errors = kbuilder.getErrors();
		if (errors.size() > 0) {
			for (KnowledgeBuilderError error : errors) {
				System.err.println(error);
			}
			throw new IllegalArgumentException("Could not parse knowledge.");
		}
		KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
		kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
		return kbase;
	}

	public static class Rules 
	{
		private int temperature1;
		private int temperature2;
		private int pressure1;
		private int pressure2;
		private double gas1;
		private double gas2;

		public Integer getTemperature1() {
			return temperature1;
		}

		public void setTemperature1(int temperature1) {
			this.temperature1 = temperature1;
		}

		public Integer getTemperature2() {
			return temperature2;
		}

		public void setTemperature2(int temperature2) {
			this.temperature2 = temperature2;
		}

		public int getPressure1() {
			return pressure1;
		}

		public void setPressure1(int pressure1) {
			this.pressure1 = pressure1;
		}

		public double getGas1() {
			return gas1;
		}

		public void setGas1(double gas1) {
			this.gas1 = gas1;
		}
		
		public int getPressure2() {
			return pressure2;
		}

		public void setPressure2(int pressure2) {
			this.pressure2 = pressure2;
		}

		public double getGas2() {
			return gas2;
		}

		public void setGas2(double gas2) {
			this.gas2 = gas2;
		}
	}
}