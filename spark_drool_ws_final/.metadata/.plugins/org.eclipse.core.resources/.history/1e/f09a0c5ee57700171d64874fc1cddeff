package sample.engine;

import java.util.HashMap;

import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.drools.KnowledgeBase;
import org.drools.KnowledgeBaseFactory;
import org.drools.builder.KnowledgeBuilder;
import org.drools.builder.KnowledgeBuilderError;
import org.drools.builder.KnowledgeBuilderErrors;
import org.drools.builder.KnowledgeBuilderFactory;
import org.drools.builder.ResourceType;
import org.drools.io.ResourceFactory;
import org.drools.logger.KnowledgeRuntimeLogger;
import org.drools.logger.KnowledgeRuntimeLoggerFactory;
import org.drools.runtime.StatefulKnowledgeSession;

public class DroolTest 
{
	public  HashMap<String, Integer> droolProcess(Dataset<Row> row1, Dataset<Row> row2, int pos) 
	{
		int t1 = (int) row1.first().getLong(pos-1);
		int t2 = (int) row2.first().getLong(pos-1);
		
		int p1 = (int) row1.first().getLong(1);
		int p2 = (int) row2.first().getLong(1);
		
		int g1 = (int) row1.first().getLong(0);
		int g2 = (int) row2.first().getLong(0);
		
		HashMap<String, Integer> updatedRecord = new HashMap<String, Integer>();
		try
		{
            KnowledgeBase kbase = readKnowledgeBase();
            StatefulKnowledgeSession ksession = kbase.newStatefulKnowledgeSession();
            KnowledgeRuntimeLogger logger = KnowledgeRuntimeLoggerFactory.newFileLogger(ksession, "test2");
            
            rulesExecution(t1, t2, updatedRecord, ksession);
            
            logger.close();
        }
		catch (Throwable t) 
		{
            t.printStackTrace();
        }
        
        return updatedRecord;
    }

	private void rulesExecution(Integer t1, Integer t2, HashMap<String, Integer> updatedRecord, StatefulKnowledgeSession ksession) 
	{
		Message message = new Message();
		message.setTemperature1(t1);
		message.setTemperature2(t2);
		message.setPressure1(pressure);
		message.setPressure1(gas);
		
		ksession.insert(message);
		ksession.fireAllRules();
		
		if(t1!=message.temperature1)
		{
			updatedRecord.put("TEMP1", message.temperature1);
		}
		if(t2!=message.temperature2)
		{
			updatedRecord.put("TEMP2", message.temperature2);
		}
	}

	private static KnowledgeBase readKnowledgeBase() throws Exception {
		KnowledgeBuilder kbuilder = KnowledgeBuilderFactory.newKnowledgeBuilder();//.newKnowledgeBuilder();
		kbuilder.add(ResourceFactory.newClassPathResource("MyRule.drl"),
				ResourceType.DRL);
		KnowledgeBuilderErrors errors = kbuilder.getErrors();
		if (errors.size() > 0) {
			for (KnowledgeBuilderError error : errors) {
				System.err.println(error);
			}
			throw new IllegalArgumentException("Could not parse knowledge.");
		}
		KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();
		kbase.addKnowledgePackages(kbuilder.getKnowledgePackages());
		return kbase;
	}

	public static class Message {
		private int temperature1;
		private int temperature2;
		private int pressure1;
		private double gas1;

		public Integer getTemperature1() {
			return temperature1;
		}

		public void setTemperature1(int temperature1) {
			this.temperature1 = temperature1;
		}

		public Integer getTemperature2() {
			return temperature2;
		}

		public void setTemperature2(int temperature2) {
			this.temperature2 = temperature2;
		}

		public int getPressure1() {
			return pressure1;
		}

		public void setPressure1(int pressure1) {
			this.pressure1 = pressure1;
		}

		public double getGas1() {
			return gas1;
		}

		public void setGas1(double gas1) {
			this.gas1 = gas1;
		}
	}
}